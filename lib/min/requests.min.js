var __classPrivateFieldSet=this&&this.__classPrivateFieldSet||function(receiver,privateMap,value){if(!privateMap.has(receiver))throw new TypeError("attempted to set private field on non-instance");return privateMap.set(receiver,value),value},__classPrivateFieldGet=this&&this.__classPrivateFieldGet||function(receiver,privateMap){if(!privateMap.has(receiver))throw new TypeError("attempted to get private field on non-instance");return privateMap.get(receiver)},_servers_file,_servers;import fs from"fs";import path from"path";import{URL}from"url";import fetch from"node-fetch";class Requests{constructor(options={}){_servers_file.set(this,void 0),_servers.set(this,void 0),__classPrivateFieldSet(this,_servers_file,options.servers_file||path.join(__dirname,'..',"servers.json")),__classPrivateFieldSet(this,_servers,JSON.parse(fs.readFileSync(__classPrivateFieldGet(this,_servers_file),{encoding:"utf8"})))}compile_path(url,params){for(const param in params){const search_regexp=new RegExp(`:(${param})`,"g");url=url.replace(search_regexp,params[param])}return url}generate_url(server,options={}){const url_type=options.url_type||"url",selected_server=__classPrivateFieldGet(this,_servers)[server],selected_url=selected_server[url_type];let url=`${selected_url.protocol}://${selected_url.url}`;null!=selected_url.port&&(url+=`:${selected_url.port}`);let composed_path="";if(null!=options.parameters){const saved_paths=options.parameters.saved_paths||"",passed_paths=options.parameters.parameters||[],wildcard_parameters=options.parameters.wildcard_parameters||[];let paths=[];if(""!=saved_paths&&null==selected_server.paths)throw Error("No saved routes found");"object"==typeof saved_paths&&saved_paths.map(path=>{paths.push(selected_server.paths[path])}),"string"==typeof saved_paths&&paths.push(selected_server.paths[saved_paths]),passed_paths.length>=0&&passed_paths.map(path=>{paths.push(path)}),paths=paths.filter(parameter=>null!=parameter),composed_path=paths.join("/"),composed_path=this.compile_path(composed_path,wildcard_parameters)}const composed_url=new URL([url,composed_path].join("/"));if(null!=options.querys)for(const query_key in options.querys){const query_value=options.querys[query_key];composed_url.searchParams.append(query_key,query_value)}return composed_url}async fetch(url,options={}){const timeout=options.timeout||3e3,timeout_retry_limit=options.timeout_retry_limit||3,method=options.method||"GET",body=options.body||void 0,headers=options.headers||void 0;let curret_retrys=0;async function try_fetch(){curret_retrys++;try{var fetched_data=await fetch(url,{timeout:timeout,method:method,body:body,headers:headers}),fetched_body=await fetched_data.json()}catch(err){if("request-timeout"==err.type){if(!(curret_retrys<timeout_retry_limit))throw Error("Retry limit exceeded");try_fetch()}throw err}return{conncetion:fetched_data,try_count:curret_retrys,body:fetched_body}}return await try_fetch()}get get_servers(){return __classPrivateFieldGet(this,_servers)}}_servers_file=new WeakMap,_servers=new WeakMap;const requests=new Requests;export{Requests,requests};export default requests;