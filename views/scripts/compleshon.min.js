/** Compleshon, crea y edita inputs predictivos de forma sencilla
 * @class
 *
 * @classdesc Compleshon permite crear de manera sencilla inputs predictivos. solo basta con indicarle al algoritmo cuales son los campos que debe vigilar
 *
 * ----
 * @version v1.0.0
 * @author {Santiago de Nicolás} <santidenicolas@gmail.com>
 * @license MIT
 *
 * Copyright 2021 Santiago de Nicolás
 * This software is MIT licensed (see LICENSE)
 *
 */
export default class Compleshon {
  target;
  ac_start_chars;
  ac_start_chars;
  constructor(settings = {}) {
    (this.target = settings.target || ".compleshon"),
    (this.ac_start_chars = settings.ac_start_chars || 3);
  }
  
  autodetection() {
    this.identify_objects();
  }
  
  identify_objects() {
    const instances = document.querySelectorAll(this.target);
    
    for (const instance of instances) {
      var soft_blur = !1;
      const input = instance.querySelector("input");
      const suggestions_container = instance.querySelector(".compleshon-suggestions");

      (instance.inner_input = input),
        (instance.inner_suggestions_container = suggestions_container),
        (instance.append_suggestions = (...suggestions) => {
          this.append_suggestions(suggestions_container, ...suggestions);
        }),
        (instance.replace_suggestions = (...suggestions) => {
          this.replace_suggestions(suggestions_container, ...suggestions);
        }),
        (instance.clear_suggestions = () => {
          suggestions_container.innerHTML = "";
        }),
        (instance.autocomplete = () => {}),
        (instance.suggestion_selected = () => {}),
        (instance.open_suggestions = () => {
          this.open_suggestions(instance);
        }),
        (instance.close_suggestions = () => {
          this.close_suggestions(instance);
        }),
        input.addEventListener("click", (e) => {
          input.value.length >= this.ac_start_chars &&
            this.open_suggestions(instance);
        }),
        input.addEventListener("input", (e) => {
          input.value.length >= this.ac_start_chars
            ? (instance.autocomplete(input, suggestions_container, e),
              this.open_suggestions(instance))
            : this.close_suggestions(instance);
        }),
        input.addEventListener("keyup", (e) => {
          const suggenstion_children = suggestions_container.childNodes;
          return "ArrowUp" == e.key
            ? ((soft_blur = !0),
              suggenstion_children[suggenstion_children.length - 1].focus())
            : "ArrowDown" == e.key
            ? ((soft_blur = !0), suggenstion_children[0].focus())
            : void 0;
        }),
        input.addEventListener("blur", (e) => {
          if (!soft_blur) {
            if (null == e.relatedTarget)
              return this.close_suggestions(instance);
            if (e.relatedTarget.classList.contains("compleshon-suggestion")) {
              const trigger = e.relatedTarget;
              return (
                (input.value = e.relatedTarget.dataset.title),
                instance.suggestion_selected(
                  input,
                  trigger,
                  suggestions_container,
                  "click"
                ),
                (soft_blur = !1),
                this.close_suggestions(instance)
              );
            }
            return this.close_suggestions(instance);
          }
          soft_blur = !1;
        }),
        suggestions_container.addEventListener("keyup", (e) => {
          const focus_suggestion = document.activeElement.classList.contains(
              "compleshon-suggestion"
            )
              ? document.activeElement
              : null,
            suggenstion_children = suggestions_container.childNodes;
          if ("ArrowDown" == e.key)
            return (
              (soft_blur = !0),
              null != focus_suggestion.nextElementSibling
                ? focus_suggestion.nextElementSibling.focus()
                : suggenstion_children[0].focus()
            );
          if ("ArrowUp" == e.key)
            return (
              (soft_blur = !0),
              null != focus_suggestion.previousElementSibling
                ? focus_suggestion.previousElementSibling.focus()
                : suggenstion_children[suggenstion_children.length - 1].focus()
            );
          if ("Enter" == e.key) {
            const trigger = e.target;
            (input.value = e.target.dataset.title),
              instance.suggestion_selected(
                input,
                trigger,
                suggestions_container,
                "enter"
              ),
              this.close_suggestions(instance);
          }
          input.focus();
        }),
        suggestions_container.addEventListener("click", (e) => {
          if (e.target.classList.contains("compleshon-suggestion")) {
            const trigger = e.target;
            return (
              (input.value = e.target.dataset.title),
              instance.suggestion_selected(
                input,
                trigger,
                suggestions_container,
                "click"
              ),
              (soft_blur = !1),
              this.close_suggestions(instance)
            );
          }
        });
    }
  }
  
  append_suggestions(suggestions_container, ...suggestions) {
    const suggestions_elements = this.suggestions_object_to_elements(
      ...suggestions
    );
    suggestions_container.append(...suggestions_elements);
  }
  
  replace_suggestions(suggestions_container, ...suggestions) {
    suggestions_container.innerHTML = "";
    const suggestions_elements = this.suggestions_object_to_elements(
      ...suggestions
    );
    suggestions_container.append(...suggestions_elements);
  }
  
  suggestions_object_to_elements(...suggestions) {
    return suggestions.map((suggestion) => {
      const suggestion_container = document.createElement("div");
      suggestion_container.classList.add("compleshon-suggestion"),
        (suggestion_container.tabIndex = -1);
      const suggestion_text_container = document.createElement("div");
      if (
        (suggestion_text_container.classList.add("compleshon-text"),
        null == suggestion.icon)
      )
        throw Error("Missing icon");
      const icon = document.createElement("i");
      if (
        (icon.classList.add(suggestion.icon),
        suggestion_container.appendChild(icon),
        null == suggestion.title[0])
      )
        throw Error("Missing title");
      const title = document.createElement("h4");
      if (
        ((title.innerHTML = suggestion.title[0]),
        suggestion_text_container.appendChild(title),
        null != suggestion.title[1])
      ) {
        const description = document.createElement("span");
        (description.innerHTML = suggestion.title[1]),
          suggestion_text_container.appendChild(description);
      }
      suggestion_container.appendChild(suggestion_text_container);
      for (const key in suggestion.dataset) {
        const value = suggestion.dataset[key];
        suggestion_container.dataset[key] = value;
      }
      return suggestion_container;
    });
  }
  
  open_suggestions(instance) {
    instance.inner_suggestions_container.childNodes.length >= 1 &&
      !instance.classList.contains("compleshon-open") &&
      instance.classList.add("compleshon-open");
  }
  
  close_suggestions(instance) {
    instance.classList.contains("compleshon-open") &&
      instance.classList.remove("compleshon-open");
  }
  
  get current_target() {
    return this.target;
  }

  get compleshon_version() {
    return "1.0.0";
  }
}